import random
from Crypto.Hash import SHA256
from base64 import b64encode
from urllib.parse import urlencode
import requests
from datetime import datetime, timedelta

from flask import session
from app import db
from app.models import User

"""
USAGE GUIDE

GETTING A TOKEN TO USE FOR AN API REQUEST
    
    call auth.getCurrentToken() and use the return value as the token

    if the user has not been authorized getCurrentToken() will raise an exception

YOU SHOULD NOT NEED TO USE ANY OTHER METHOD MANUALLY OR ACCESS ANY PART OF AUTH
"""
class UserNotAuthroizedError(Exception):
  pass

class BadRefreshTokenError(Exception):
  pass

class Auth:
  def __init__(self):
    self.client_id = "45ef5d2726a44fb3b06299adab1fb822"
    self.redirect_uri = "http://127.0.0.1:5000/authenticate"
    self.code_verifier = ""
    self.code_challenge = ""
    self.auth_code = ""
    # after user has been authorized the below are all that should ever be altered
    self.access_token = ""
    self.refresh_token = ""
    self.time_token_granted = ""
  
  def clear(self):
    self.code_verifier = ""
    self.code_challenge = ""
    self.auth_code = ""
    self.access_token = ""
    self.refresh_token = ""
    self.time_token_granted = ""

  """
  Generates a random alphanumeric string of length passed to funciton.
  """
  def generateRandomString(self, length):
    available_characters = "ABCDEFGHIJKLMNOPQRSTUVWXZYabcdefghijklmnopqrstuvwxyz0123456789"
    available_characters_length = len(available_characters)
    random_string = ""
    random_int = 0
    for i in range(0,length):
      random_int = random.randint(0, available_characters_length-1)
      random_string += available_characters[random_int]
    return random_string
  
  """
  Performs a sha256 hash on some input.
  """
  def sha256(self, input):
    data = input.encode("utf-8")
    hash = SHA256.new()
    hash.update(data)
    return hash.digest()
  
  """
  Encodes a hash into base64 that works with the Spotify API.
  """
  def base64encode(self, input):
    return b64encode(input).decode().replace("=","").replace("+","-").replace("/","_")
  
  """
  Generates the code challenge that the spotify API uses to authorize user.
  
  Input should be a random string of length 128 generated by generateRandomString()
  """
  def generateCodeChallenge(self, input):
    hashed = self.sha256(input)
    code_challenge = self.base64encode(hashed)
    return code_challenge
  
  """
  Generates the URL that allows the user to authorize the app to use the spotify API with
  their account.

  User should then be redirected to this address to get permission.
  
  After confirm or deny, user will be redirected back to self.redirect_uri 
  (currently http:127.0.0.1:5000/auth)

  At the redirect uri, spotify will add the authorization code as a query paramter.
  """
  def generateAuthURL(self):
    self.code_verifier = self.generateRandomString(128)
    self.code_challenge = self.generateCodeChallenge(self.code_verifier)
    url = "https://accounts.spotify.com/authorize"
    params = {
      "client_id": self.client_id,
      "response_type": "code",
      "redirect_uri": self.redirect_uri,
      "scope": "playlist-read-private playlist-read-collaborative user-top-read user-read-recently-played user-library-read",
      "code_challenge_method": "S256",
      "code_challenge": self.code_challenge
    }
    auth_url = url + "?" + urlencode(params)
    return auth_url
  
  """
  Uses the code obtained from the authorization to request an access token from the Spotify API.
  """
  def requestAccessToken(self):
    url = "https://accounts.spotify.com/api/token"
    headers = {
      "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
      "grant_type": "authorization_code",
      "code": self.auth_code,
      "redirect_uri": self.redirect_uri,
      "client_id": self.client_id,
      "code_verifier": self.code_verifier
    }
    return requests.post(url, headers=headers, data=data)
  
  """
  Parses json token into the access token and refresh token.
  
  Stores the time the token was granted so that we can refresh the token before it expires.
  """
  def setCurrentToken(self, data):
    self.access_token = data['access_token']
    self.refresh_token = data['refresh_token']
    self.time_token_granted = datetime.now()
    self.storeToken()
    return self.time_token_granted
  
  """
  Completes the necessary steps to gaining access to the Spotify API after user has confirmed
  authorization.
  """
  def completeAuth(self, code):
    self.auth_code = code
    response = self.requestAccessToken()
    data = response.json()
    return self.setCurrentToken(data)

  """
  Request a token refresh from the Spotify API.
  """
  def requestTokenRefresh(self):
    url = "https://accounts.spotify.com/api/token"
    headers = {
      "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
      "grant_type": "refresh_token",
      "refresh_token": self.refresh_token,
      "client_id": self.client_id
    }
    return requests.post(url, headers=headers, data=data)
  
  """
  Gets a new token from the SpotifyAPI and sets the current token fields to the new token.
  """
  def refreshCurrentToken(self):
    response = self.requestTokenRefresh()
    if response.status_code == 400:
      raise BadRefreshTokenError 
    data = response.json()
    print(data)
    return self.setCurrentToken(data)
  
  """
  Stores a token in the session.
  """
  def storeSessionToken(self): 
    session["refresh_token"] = self.refresh_token
    return session["refresh_token"]
  
  """
  Stores the refresh token in the database.
  """
  def storeDatabaseToken(self):
    user_id = session['user']['id']
    user = User.query.get(user_id)
    user.refresh_token = self.refresh_token
    db.session.commit()
  
  """
  Stores a token in the session, and the refresh token in the database.
  """
  def storeToken(self):
    self.storeSessionToken()
    self.storeDatabaseToken()

  """
  Restores auth from a session token.

  Returns false if no session_token exists.
  """
  def restoreSessionToken(self):
    try:
      self.refresh_token = session["refresh_token"]
      self.refreshCurrentToken()
      return True
    except KeyError:
      return False

  """
  Restores auth from database token. Assumes user is logged in.

  Returns false if user has not been authorized.
  """
  def restoreDatabaseToken(self):
    try:
      user_id = session["user"]["id"]
      user = User.query.get(user_id)
    except KeyError:
      return False
    
    refresh_token = user.refresh_token
    if refresh_token == None:
      return False
    
    self.refresh_token = refresh_token
    self.refreshCurrentToken()
    return True

  """
  Restores auth from previous usage (session or database if no token in session).

  Returns false if the user has not been authorized.
  """
  def restoreToken(self):
    if (self.restoreSessionToken()):
      return True
    return self.restoreDatabaseToken()
  
  """
  Gets a current token. If current token is close to expiring, requests a new one.

  Raises an exception if user has not been authorized.
  """
  def getCurrentToken(self):
    # check if this is a fresh auth instance
    if (self.access_token == ""):
      # restore the auth state from stored token
      if (self.restoreToken()):
        raise UserNotAuthroizedError
    
    # get the current token
    current_time = datetime.now()
    # token expires in 60 minutes so refresh every 55 to be safe
    if ((current_time - self.time_token_granted) > timedelta(minutes=55)):
      self.refreshCurrentToken()
    return self.access_token

auth = Auth()